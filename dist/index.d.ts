import { ISettingsOptional } from './defaultOptions';
export default class NativeScrollAugment {
    private hasTouch;
    private DETECT_EVT;
    private activeId;
    private $parent;
    private scrollsAreas;
    private scrollLeft;
    private scrollTop;
    private lastScrollLeft;
    private lastScrollTop;
    private targetTop;
    private targetLeft;
    private velocityLeft;
    private velocityTop;
    private amplitudeLeft;
    private amplitudeTop;
    private timeStamp;
    private referenceX;
    private referenceY;
    private pressed;
    private autoScrollTracker;
    private isAutoScrolling;
    private resetMomentumTracker;
    private settings;
    constructor(props: {
        parent: HTMLElement;
        scrollsAreas: HTMLElement[];
        options?: ISettingsOptional;
    });
    destroy(): void;
    init(): void;
    updateOptions(options: ISettingsOptional): void;
    replaceScrollAreas(scrollsAreas: HTMLElement[], left?: number, top?: number): void;
    _setActiveNode(e: Event): void;
    _leftVelocityTracker(): void;
    _topVelocityTracker(): void;
    scrollTo(left: number, top: number): void;
    _onScroll(e: Event): void;
    _autoScroll(): void;
    _triggerAutoScroll(targetLeft: number, targetTop: number, amplitudeLeft: number, amplitudeTop: number): void;
    _cancelAutoScroll(): void;
    _resetMomentum(): void;
    _tap(e: MouseEvent | TouchEvent): void;
    _swipe(e: MouseEvent | TouchEvent): void;
    _release(): void;
    _scrollToEdges(start: boolean, left: boolean, top: boolean): void;
    _scrollToValue(addTo: boolean, left: any, top: any): void;
    scrollToStart(): void;
    scrollToStartLeft(): void;
    scrollToStartTop(): void;
    scrollToEnd(): void;
    scrollToEndLeft(): void;
    scrollToEndTop(): void;
    scrollToPosition(left: any, top: any): void;
    scrollByValue(left: any, top: any): void;
}
